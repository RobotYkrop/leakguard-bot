import { forwardRef, Inject, Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { IBot } from 'src/common/interfaces/bot.interface';
import { BreachCheckService } from 'src/modules/breach-check/services/breach-check.service';
import { RedisCacheService } from 'src/modules/cache/redis/redis-cache.service';
import { Telegraf } from 'telegraf';
import {
  InlineKeyboardMarkup,
  ParseMode,
} from 'telegraf/typings/core/types/typegram';

interface CheckResult {
  message: string;
  reply_markup?: InlineKeyboardMarkup;
}

@Injectable()
export class TelegramBotService implements IBot {
  private readonly logger = new Logger(TelegramBotService.name);
  private readonly STATS_KEY = 'bot:stats';

  constructor(
    @InjectBot() private readonly bot: Telegraf,
    @Inject(forwardRef(() => BreachCheckService))
    private readonly breachCheckService: BreachCheckService,
    private readonly cacheService: RedisCacheService,
  ) {
    this.logger.log('TelegramBotService initialized');
  }

  async sendMessage(
    chatId: number,
    message: string,
    options: { parse_mode?: ParseMode } = {},
  ): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(chatId, message, {
        parse_mode: options.parse_mode || 'Markdown',
        ...options,
      });
      this.logger.debug(`Sent message to chat ${chatId}: ${message}`);
    } catch (error) {
      this.logger.error(
        `Failed to send message to chat ${chatId}: ${(error as Error).message}`,
      );
      throw error;
    }
  }

  async sendProgressMessage(chatId: number, message: string): Promise<void> {
    await this.sendMessage(chatId, message);
  }

  async checkEmail(email: string, chatId: number): Promise<CheckResult> {
    await this.incrementStat('email_checks');
    await this.sendProgressMessage(chatId, 'üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–µ–∫...');
    const breaches = await this.breachCheckService.checkEmailBreaches(email);
    await this.sendProgressMessage(
      chatId,
      'üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...',
    );
    this.logger.debug(`Found ${breaches.length} breaches for ${email}`);

    if (!breaches.length) {
      const message = `üéâ *–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!* –í–∞—à email *${email}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.`;
      this.logger.debug(`Returning email check result: ${message}`);
      return { message };
    }

    const lines = breaches.map((b) => {
      this.logger.debug(
        `Processing breach: Name=${b.Name}, Domain=${b.Domain || 'N/A'}, BreachDate=${b.BreachDate || 'N/A'}`,
      );
      const parts = [`- *${b.Name}*`];
      if (b.BreachDate) parts.push(` üìÖ –î–∞—Ç–∞: ${b.BreachDate}`);
      if (b.Domain) parts.push(` üåê –î–æ–º–µ–Ω: ${b.Domain}`);
      return parts.join('');
    });

    const message = `
üö® *–ù–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö* üö®
–í–∞—à email *${email}* –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ç–µ—á–∫–∞—Ö:

${lines.join('\n')}

üîê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:
- –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
- –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.
`;

    if (message.length > 4096) {
      const fallbackMessage = `
üö® *–ù–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö* üö®
–í–∞—à email *${email}* –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ ${breaches.length} —É—Ç–µ—á–∫–∞—Ö. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

üîê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:
- –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
- –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.
`;
      this.logger.debug(
        `Message too long, returning fallback: ${fallbackMessage}`,
      );
      return {
        message: fallbackMessage,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                callback_data: `analytics:${email}`,
              },
            ],
          ],
        },
      };
    }

    const reply_markup: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          {
            text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            callback_data: `analytics:${email}`,
          },
        ],
      ],
    };
    this.logger.debug(`Returning email check result: ${message}`);
    return { message, reply_markup };
  }

  async checkPassword(password: string): Promise<string> {
    await this.incrementStat('password_checks');
    const result = await this.breachCheckService.checkPassword(password);
    this.logger.debug(`Password check result: ${JSON.stringify(result)}`);

    const lines = [
      result.found
        ? `‚ö†Ô∏è *–ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!* (${result.count} —Ä–∞–∑)`
        : '‚úÖ *–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.*',
      result.count > 0
        ? `üìä –ò–∑ –Ω–∏—Ö ${result.count} –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ XposedOrNot.`
        : '',
      `üî¢ –¶–∏—Ñ—Ä—ã: ${result.digits}`,
      `üî† –ë—É–∫–≤—ã: ${result.alphabets}`,
      `üî£ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: ${result.specialChars}`,
      `üìè –î–ª–∏–Ω–∞: ${result.length}`,
      result.found
        ? '\nüîê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π!'
        : '',
    ];
    const message = lines.filter(Boolean).join('\n');
    this.logger.debug(`Returning password check result: ${message}`);
    return message;
  }

  async getAnalytics(email: string): Promise<string> {
    await this.incrementStat('analytics_requests');
    const analytics = await this.breachCheckService.getAnalytics(email);
    this.logger.debug(
      `Analytics result for ${email}: ${JSON.stringify(analytics)}`,
    );
    const lines: string[] = [];

    if (analytics.breachesDetails.length) {
      lines.push('üìã *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–µ—á–µ–∫:*');
      analytics.breachesDetails.forEach((b) => {
        lines.push(`- *${b.breach}*:`);
        lines.push(` üìÖ –î–∞—Ç–∞: ${b.xposed_date}`);
        lines.push(` üåê –î–æ–º–µ–Ω: ${b.domain}`);
        lines.push(` üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏—è: ${b.industry}`);
        lines.push(` üìú –û–ø–∏—Å–∞–Ω–∏–µ: ${b.details}`);
        lines.push(` üìÇ –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${b.xposed_data}`);
        lines.push(` üîê –¢–∏–ø –ø–∞—Ä–æ–ª—è: ${b.password_risk}`);
      });
    }

    if (analytics.industries.length) {
      lines.push('\nüè≠ *–ò–Ω–¥—É—Å—Ç—Ä–∏–∏ —É—Ç–µ—á–µ–∫:*');
      analytics.industries.forEach((i) => {
        lines.push(`- ${i.name} (${i.count})`);
      });
    }

    if (analytics.passwordStrength) {
      lines.push('\nüîê *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π:*');
      lines.push(
        `- –õ–µ–≥–∫–æ –≤–∑–ª–∞–º—ã–≤–∞–µ–º—ã–µ: ${analytics.passwordStrength.PlainText}`,
      );
      lines.push(
        `- –ù–∞–¥—ë–∂–Ω—ã–µ (—Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): ${analytics.passwordStrength.StrongHash}`,
      );
      lines.push(`- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: ${analytics.passwordStrength.Unknown}`);
    }

    if (analytics.risk) {
      lines.push(
        `\n‚ö†Ô∏è *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* ${analytics.risk.label} (–æ—Ü–µ–Ω–∫–∞: ${analytics.risk.score})`,
      );
    }

    if (analytics.exposedData.length) {
      lines.push('\nüìÇ *–°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*');
      analytics.exposedData.forEach((category) => {
        lines.push(`${category.category}:`);
        category.items.forEach((item) => {
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º '_'
          const itemName = item.name
            .replace('data_Emmail addresses', 'data_Email addresses')
            .replace(/_/g, '\\_');
          lines.push(`- ${itemName}: ${item.value}`);
        });
      });
    }

    if (analytics.years.length) {
      lines.push('\nüìÖ *–ì–æ–¥—ã —É—Ç–µ—á–µ–∫:*');
      analytics.years.forEach((y) => {
        lines.push(`- ${y.year}: ${y.count}`);
      });
    }

    const message = lines.length
      ? lines.join('\n')
      : 'üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.*';

    if (message.length > 4096) {
      return 'üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.';
    }

    this.logger.debug(`Returning analytics result: ${message}`);
    return message;
  }

  async clearCache(): Promise<string> {
    try {
      await this.cacheService.clearAll();
      this.logger.debug('Cache cleared');
      return '‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!';
    } catch (error) {
      this.logger.error(`Failed to clear cache: ${(error as Error).message}`);
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  async clearEmailCache(): Promise<string> {
    try {
      await this.cacheService.clearByPattern('email:*');
      this.logger.debug('Email cache cleared');
      return '‚úÖ –ö—ç—à email —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!';
    } catch (error) {
      this.logger.error(
        `Failed to clear email cache: ${(error as Error).message}`,
      );
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  async getStats(): Promise<string> {
    try {
      const emailChecks =
        (await this.cacheService.get<number>(
          `${this.STATS_KEY}:email_checks`,
        )) || 0;
      const passwordChecks =
        (await this.cacheService.get<number>(
          `${this.STATS_KEY}:password_checks`,
        )) || 0;
      const analyticsRequests =
        (await this.cacheService.get<number>(
          `${this.STATS_KEY}:analytics_requests`,
        )) || 0;

      const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞* üìä

- –ü—Ä–æ–≤–µ—Ä–æ–∫ email: ${emailChecks}
- –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–∞—Ä–æ–ª–µ–π: ${passwordChecks}
- –ó–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analyticsRequests}
`;

      this.logger.debug(`Returning stats: ${message}`);
      return message;
    } catch (error) {
      this.logger.error(
        `Failed to retrieve stats: ${(error as Error).message}`,
      );
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  private async incrementStat(metric: string): Promise<void> {
    try {
      await this.cacheService.increment(`${this.STATS_KEY}:${metric}`);
      this.logger.debug(`Incremented stat ${metric}`);
    } catch (error) {
      this.logger.error(
        `Failed to increment stat ${metric}: ${(error as Error).message}`,
      );
    }
  }
}

export { CheckResult };
