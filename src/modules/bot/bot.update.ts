import { Context, Markup } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';
import { BotService } from './bot.service';
import { Update, Start, Ctx, Action, On, Command } from 'nestjs-telegraf';
import { Message, CallbackQuery } from 'telegraf/typings/core/types/typegram';

@Injectable()
@Update()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);
  private readonly userState: Map<number, { state: string; attempts: number }> =
    new Map();
  private readonly MAX_ATTEMPTS = 3;
  private readonly ADMIN_IDS = [855779091];

  constructor(private readonly botService: BotService) {}

  private getWelcomeMessage(): string {
    return (
      'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LeakGuardBot!*\n\n' +
      '–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª–∏ –ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.\n\n' +
      '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?'
    );
  }

  @Start()
  async start(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.logger.log(`User ${userId} started the bot`);
    this.userState.delete(userId);
    await ctx.reply(
      this.getWelcomeMessage(),
      Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'check_password')],
        [Markup.button.callback('üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email', 'check_email')],
      ]),
    );
  }

  @Command('monitor')
  async monitorEmailCommand(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.userState.set(userId, {
      state: 'awaiting_monitor_email',
      attempts: 0,
    });
    await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —É—Ç–µ—á–µ–∫:');
  }

  @Action('check_password')
  async onCheckPasswordAction(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.userState.set(userId, { state: 'awaiting_password', attempts: 0 });
    await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  }

  @Action('check_email')
  async onCheckEmailAction(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.userState.set(userId, { state: 'awaiting_email', attempts: 0 });
    await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  }

  @On('text')
  async onText(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    const message = ctx.message as Message.TextMessage | undefined;
    if (!message || !('text' in message)) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    const text = message.text.trim();
    if (!text) {
      await ctx.reply('‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    const userData = this.userState.get(userId);
    if (!userData) {
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥.',
        Markup.inlineKeyboard([
          [Markup.button.callback('üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'check_password')],
          [Markup.button.callback('üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email', 'check_email')],
        ]),
      );
      return;
    }

    try {
      if (userData.state === 'awaiting_password') {
        this.logger.log(`User ${userId} submitted password for check`);
        const result = await this.botService.checkPassword(text);
        await ctx.reply(result, { parse_mode: 'Markdown' });
        this.userState.delete(userId);
      } else if (userData.state === 'awaiting_email') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(text)) {
          userData.attempts += 1;
          this.userState.set(userId, userData);
          if (userData.attempts >= this.MAX_ATTEMPTS) {
            this.userState.delete(userId);
            await ctx.reply(
              `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n${this.getWelcomeMessage()}`,
              Markup.inlineKeyboard([
                [
                  Markup.button.callback(
                    'üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å',
                    'check_password',
                  ),
                ],
                [Markup.button.callback('üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email', 'check_email')],
              ]),
            );
          } else {
            await ctx.reply(
              `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${this.MAX_ATTEMPTS - userData.attempts}).`,
            );
          }
          return;
        }

        this.logger.log(`User ${userId} submitted email for check: ${text}`);
        const result = await this.botService.checkEmail(text, userId);
        await ctx.reply(result.message, {
          parse_mode: 'Markdown',
          ...(result.reply_markup ? { reply_markup: result.reply_markup } : {}),
        });
        this.userState.delete(userId);
      }
    } catch (error) {
      this.logger.warn(
        `Error processing input for user ${userId}: ${(error as Error).message}`,
      );
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  @Command('password')
  async checkPasswordCommand(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.userState.set(userId, { state: 'awaiting_password', attempts: 0 });
    await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  }

  @Command('check')
  async checkEmailCommand(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    this.userState.set(userId, { state: 'awaiting_email', attempts: 0 });
    await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  }

  @Command('clearcache')
  async clearCache(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }
    if (!this.ADMIN_IDS.includes(userId)) {
      await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
      return;
    }

    this.logger.log(`User ${userId} requested cache clear`);
    const result = await this.botService.clearCache();
    await ctx.reply(result, { parse_mode: 'Markdown' });
  }

  @Command('clearemailcache')
  async clearEmailCache(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }
    if (!this.ADMIN_IDS.includes(userId)) {
      await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
      return;
    }

    this.logger.log(`User ${userId} requested email cache clear`);
    const result = await this.botService.clearEmailCache();
    await ctx.reply(result, { parse_mode: 'Markdown' });
  }

  @Action(/analytics:(.+)/)
  async onAnalytics(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as
      | CallbackQuery.DataQuery
      | undefined;
    if (!callbackQuery || !('data' in callbackQuery)) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.');
      return;
    }

    const match = callbackQuery.data.match(/analytics:(.+)/);
    const email = match?.[1];
    if (!email) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å email –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.');
      return;
    }

    this.logger.log(`User ${ctx.from?.id} requested analytics for ${email}`);
    const analytics = await this.botService.getAnalytics(email);
    await ctx.reply(analytics, { parse_mode: 'Markdown' });
  }
}
