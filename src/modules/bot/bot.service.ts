import { Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { LeakCheckService } from '../leak-check/leak-check.service';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';
import { RedisService } from './redis/redis.service';

interface CheckResult {
  message: string;
  reply_markup?: InlineKeyboardMarkup;
}

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private readonly STATS_KEY = 'bot:stats';

  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly leakCheckService: LeakCheckService,
    private readonly redisService: RedisService,
  ) {}

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
  private escapeMarkdown(text: string): string {
    return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
  }

  async sendProgressMessage(chatId: number, message: string): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
      });
      this.logger.log(`Sent progress message to chat ${chatId}: ${message}`);
    } catch (error) {
      this.logger.error(
        `Failed to send progress message to chat ${chatId}: ${(error as Error).message}`,
      );
    }
  }

  async checkEmail(email: string, chatId: number): Promise<CheckResult> {
    await this.incrementStat('email_checks');
    const breaches = await this.leakCheckService.checkEmailBreaches(
      email,
      chatId,
    );
    if (!breaches.length) {
      return {
        message: 'üéâ *–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!* –í–∞—à email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.',
      };
    }

    const lines = breaches
      .map((b) => {
        const parts = [`- *${this.escapeMarkdown(b.Name)}*`];
        if (b.BreachDate)
          parts.push(`  üìÖ –î–∞—Ç–∞: ${this.escapeMarkdown(b.BreachDate)}`);
        if (b.Domain)
          parts.push(`  üåê –î–æ–º–µ–Ω: ${this.escapeMarkdown(b.Domain)}`);
        return parts;
      })
      .flat();

    const message = `
üö® *–ù–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö* üö®
–í–∞—à email *${this.escapeMarkdown(email)}* –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ç–µ—á–∫–∞—Ö:

${lines.join('\n')}

üîê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:
- –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
- –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.
    `;

    const reply_markup: InlineKeyboardMarkup = {
      inline_keyboard: [
        [{ text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: `analytics:${email}` }],
      ],
    };
    return { message, reply_markup };
  }

  async getAnalytics(email: string): Promise<string> {
    await this.incrementStat('analytics_requests');
    const analytics = await this.leakCheckService.getBreachAnalytics(email);
    const lines: string[] = [];

    if (analytics.breachesDetails.length) {
      lines.push('üìã *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–µ—á–µ–∫:*');
      analytics.breachesDetails.forEach((b) => {
        lines.push(`- *${this.escapeMarkdown(b.breach)}*:`);
        lines.push(`  üìÖ –î–∞—Ç–∞: ${this.escapeMarkdown(b.xposed_date)}`);
        lines.push(`  üåê –î–æ–º–µ–Ω: ${this.escapeMarkdown(b.domain)}`);
        lines.push(`  üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏—è: ${this.escapeMarkdown(b.industry)}`);
        lines.push(`  üìú –û–ø–∏—Å–∞–Ω–∏–µ: ${this.escapeMarkdown(b.details)}`);
        lines.push(
          `  üìÇ –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${this.escapeMarkdown(b.xposed_data)}`,
        );
        lines.push(`  üîê –¢–∏–ø –ø–∞—Ä–æ–ª—è: ${this.escapeMarkdown(b.password_risk)}`);
      });
    }

    if (analytics.industries.length) {
      lines.push('\nüè≠ *–ò–Ω–¥—É—Å—Ç—Ä–∏–∏ —É—Ç–µ—á–µ–∫:*');
      analytics.industries.forEach((i) => {
        lines.push(`‚Ä¢ ${this.escapeMarkdown(i.name)} (${i.count})`);
      });
    }

    if (analytics.passwordStrength) {
      lines.push('\nüîê *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π:*');
      lines.push(
        `‚Ä¢ –õ–µ–≥–∫–æ –≤–∑–ª–∞–º—ã–≤–∞–µ–º—ã–µ: ${analytics.passwordStrength.PlainText}`,
        `‚Ä¢ –ù–∞–¥—ë–∂–Ω—ã–µ (—Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): ${analytics.passwordStrength.StrongHash}`,
        `‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: ${analytics.passwordStrength.Unknown}`,
      );
    }

    if (analytics.risk) {
      lines.push(
        `\n‚ö†Ô∏è *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* ${this.escapeMarkdown(analytics.risk.label)} (–æ—Ü–µ–Ω–∫–∞: ${analytics.risk.score})`,
      );
    }

    if (analytics.exposedData.length) {
      lines.push('\nüìÇ *–°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*');
      analytics.exposedData.forEach((category) => {
        lines.push(`${this.escapeMarkdown(category.category)}:`);
        category.items.forEach((item) => {
          lines.push(`‚Ä¢ ${this.escapeMarkdown(item.name)}: ${item.value}`);
        });
      });
    }

    if (analytics.years.length) {
      lines.push('\nüìÖ *–ì–æ–¥—ã —É—Ç–µ—á–µ–∫:*');
      analytics.years.forEach((y) => {
        lines.push(`‚Ä¢ ${y.year}: ${y.count}`);
      });
    }

    const message = lines.length
      ? lines.join('\n')
      : 'üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.*';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if (message.length > 4096) {
      return 'üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.';
    }

    return message;
  }

  async checkPassword(password: string): Promise<string> {
    await this.incrementStat('password_checks');
    const result = await this.leakCheckService.checkPassword(password);
    const lines = [
      result.found
        ? `‚ö†Ô∏è *–ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!* (${result.count} —Ä–∞–∑)`
        : '‚úÖ *–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.*',
      result.count > 0
        ? `üìä –ò–∑ –Ω–∏—Ö ${result.count} –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ XposedOrNot.`
        : '',
      `üî¢ –¶–∏—Ñ—Ä—ã: ${result.digits}`,
      `üî† –ë—É–∫–≤—ã: ${result.alphabets}`,
      `üî£ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: ${result.specialChars}`,
      `üìè –î–ª–∏–Ω–∞: ${result.length}`,
      result.found
        ? '\nüîê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π!'
        : '',
    ];
    return lines.filter(Boolean).join('\n');
  }

  async clearCache(): Promise<string> {
    try {
      await this.redisService.clearCache();
      return '‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!';
    } catch (error) {
      this.logger.error(`Failed to clear cache: ${(error as Error).message}`);
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  async clearEmailCache(): Promise<string> {
    try {
      await this.redisService.clearCacheByPattern('email:*');
      return '‚úÖ –ö—ç—à email —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!';
    } catch (error) {
      this.logger.error(
        `Failed to clear email cache: ${(error as Error).message}`,
      );
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  private async incrementStat(metric: string): Promise<void> {
    try {
      await this.redisService.increment(`${this.STATS_KEY}:${metric}`);
    } catch (error) {
      this.logger.error(
        `Failed to increment stat ${metric}: ${(error as Error).message}`,
      );
    }
  }

  async getStats(): Promise<string> {
    try {
      const emailChecks =
        (await this.redisService.get<number>(
          `${this.STATS_KEY}:email_checks`,
        )) || 0;
      const passwordChecks =
        (await this.redisService.get<number>(
          `${this.STATS_KEY}:password_checks`,
        )) || 0;
      const analyticsRequests =
        (await this.redisService.get<number>(
          `${this.STATS_KEY}:analytics_requests`,
        )) || 0;

      const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞* üìä

- –ü—Ä–æ–≤–µ—Ä–æ–∫ email: ${emailChecks}
- –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–∞—Ä–æ–ª–µ–π: ${passwordChecks}
- –ó–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analyticsRequests}
      `;

      if (message.length > 4096) {
        return 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.*';
      }

      return message;
    } catch (error) {
      this.logger.error(
        `Failed to retrieve stats: ${(error as Error).message}`,
      );
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }
}
